{
  "swagger": "2.0",
  "info": {
    "title": "CEDAR Terminology Server API",
    "description": "CEDAR Terminology Server API",
    "version": "2.5.44-SNAPSHOT"
  },
  "basePath": "/bioportal",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Classes"
    },
    {
      "name": "Ontologies"
    },
    {
      "name": "Value sets"
    },
    {
      "name": "Value set collections"
    },
    {
      "name": "Values"
    },
    {
      "name": "Relations"
    }
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authorization",
      "description": "Your CEDAR API key, using the format 'apiKey &lt;yourApiKey&gt;'",
      "in": "header"
    }
  },
  "parameters": {
    "page": {
      "name": "page",
      "in": "query",
      "description": "Page to be returned. Example&#58; 7.",
      "type": "integer",
      "required": false,
      "default": 1
    },
    "page_size": {
      "name": "page_size",
      "in": "query",
      "description": "Number of results per page. Example&#58; 10.",
      "type": "integer",
      "required": false,
      "default": 50
    },
    "ontology": {
      "name": "ontology",
      "in": "path",
      "description": "BioPortal ontology identifier. Examples&#58; NCIT, FMA, OBI.",
      "required": true,
      "type": "string"
    },
    "ontology_id": {
      "name": "id",
      "in": "path",
      "description": "BioPortal ontology identifier. Examples&#58; NCIT, FMA, OBI.",
      "required": true,
      "type": "string"
    },
    "class_id": {
      "name": "id",
      "in": "path",
      "description": "Class identifier. Examples&#58; http://data.bioontology.org/provisional_classes/4f82a7f0-bbba-0133-b23e-005056010074 (provisional class). http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C3224 (regular class).",
      "required": true,
      "type": "string"
    },
    "class_id_regular": {
      "name": "id",
      "in": "path",
      "description": "Class identifier. Example&#58; http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C3224.",
      "required": true,
      "type": "string"
    },
    "class_id_provisional": {
      "name": "id",
      "in": "path",
      "description": "Provisional class identifier. Example&#58; http://data.bioontology.org/provisional_classes/4f82a7f0-bbba-0133-b23e-005056010074.",
      "required": true,
      "type": "string"
    },
    "relation_id": {
      "name": "id",
      "in": "path",
      "description": "Provisional relation short identifier. Examples&#58; 720f50f0-ae6f-0133-848f-005056010073.",
      "required": true,
      "type": "string"
    },
    "vs_collection": {
      "name": "vs_collection",
      "in": "path",
      "description": "Value set collection. Example&#58; CEDARVS.",
      "required": true,
      "type": "string"
    },
    "vs_id": {
      "name": "id",
      "in": "path",
      "description": "Provisional value set short identifier. Example&#58; af033050-b04b-0133-981f-005056010074",
      "required": true,
      "type": "string"
    },
    "vs": {
      "name": "vs",
      "in": "path",
      "description": "Value set identifier. Example&#58; http://www.semanticweb.org/jgraybeal/ontologies/2015/7/cedarvaluesets#Study_File_Type",
      "required": true,
      "type": "string"
    },
    "value_id": {
      "name": "id",
      "in": "path",
      "description": "Value identifier. Example&#58; 42f22880-b04b-0133-848f-005056010073",
      "required": true,
      "type": "string"
    },
    "property_id": {
      "name": "id",
      "in": "path",
      "description": "Property identifier. Examples&#58; http://id.loc.gov/ontologies/bibframe/place.",
      "required": true,
      "type": "string"
    }
  },
  "responses": {
    "ok": {
      "description": "Successful operation"
    },
    "no_content": {
      "description": "Successful operation (no content)"
    },
    "bad_request": {
      "description": "Bad request"
    },
    "unauthorized": {
      "description": "Unauthorized"
    },
    "unprocessable_entity": {
      "description": "Unprocessable entity"
    },
    "not_found": {
      "description": "Not found"
    },
    "internal_error": {
      "description": "Internal server error"
    }
  },
  "paths": {
    "/integrated-search": {
      "post": {
        "summary": "Search for classes and values based on CEDAR value constraints",
        "tags": [
          "Classes",
          "Value sets",
          "Values"
        ],
        "description": "Search for ontology classes, value sets, and values based on CEDAR value constraints. This endpoint takes a controlled term field specification and any user-supplied initial characters and returns conforming values. <br /> <br /> Some sample calls in Insomnia (https://insomnia.rest/) format are available at https://github.com/metadatacenter/cedar-util/blob/master/api-calls/CEDAR_Insomnia_API_calls.json. <br /> <br />Note that in some cases, the server will need to sort the results obtained from BioPortal and the original pagination information will not be valid any more. In those situations, the values of some of the pagination fields returned as part of the results (e.g., pageCount, nextPage, etc.) cannot be computed consistently, and the server will assign a 'null' value to those fields.",
        "parameters": [
          {
            "name": "request body",
            "required": true,
            "in": "body",
            "description": "Object that encapsulates the information needed to run the search query. The \"valueConstraints\" field specification is based on CEDAR's \"_valueConstraints\" field. See https://more.metadatacenter.org/tools-training/outreach/cedar-template-model for more details.",
            "schema": {
              "$ref": "#/definitions/IntegratedSearchRequestBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of search results",
            "schema": {
              "$ref": "#/definitions/IntegratedSearchResults"
            }
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "422": {
            "$ref": "#/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/search": {
      "get": {
        "summary": "Search",
        "tags": [
          "Classes",
          "Value sets",
          "Values"
        ],
        "description": "Search for ontology classes, value sets, and values.",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query. Example&#58; melanoma.",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Comma-separated list of search scopes. Accepted values={all, classes, value_sets, values}. Default&#58; all.",
            "required": false,
            "type": "string",
            "default": "all"
          },
          {
            "name": "sources",
            "in": "query",
            "description": "Comma-separated list of target ontologies and/or value sets. Example&#58; 'ontologies=CEDARVS,NCIT'. By default, all BioPortal ontologies and value sets are considered. The value of 'scope' overrides the list of sources specified using this parameter.",
            "required": false,
            "type": "string"
          },
          {
            "name": "suggest",
            "in": "query",
            "description": "Will perform a search specifically geared towards type-ahead suggestions. Default&#58; false.",
            "required": false,
            "type": "string"
          },
          {
            "name": "subtree_root_id",
            "in": "query",
            "description": "Class identifier that limits the search to the branch rooted on that class. It must be URL encoded. Example&#58; http%3A%2F%2Fncicb.nci.nih.gov%2Fxml%2Fowl%2FEVS%2FThesaurus.owl%23C3224.",
            "required": false,
            "type": "string"
          },
          {
            "name": "source",
            "in": "query",
            "description": "Ontology for which the subtree search will be performed. Example&#58; NCIT.",
            "required": false,
            "type": "string"
          },
          {
            "name": "maxDepth",
            "in": "query",
            "description": "Subtree depth.",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/page_size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/property_search": {
      "get": {
        "summary": "Property search",
        "tags": [
          "Properties"
        ],
        "description": "Search for properties.",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query. Example&#58; title.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sources",
            "in": "query",
            "description": "Comma-separated list of target ontologies. Example&#58; 'ontologies=BIBFRAME'. By default, all BioPortal ontologies and value sets are considered.",
            "required": false,
            "type": "string"
          },
          {
            "name": "exact_match",
            "in": "query",
            "description": "Restricts results only to the exact matches of the query in the property id, label, or the generated label (a label, auto-generated from the id). Default&#58; false.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "require_definitions",
            "in": "query",
            "description": "Filter results only to those that include definitions.",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/page_size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/classes": {
      "post": {
        "summary": "Create class",
        "tags": [
          "Classes"
        ],
        "description": "Create a provisional class.",
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "summary": "Get classes",
        "tags": [
          "Classes"
        ],
        "description": "Get all classes from a specific ontology (including both regular and provisional classes).",
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/page_size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/classes/{id}": {
      "get": {
        "summary": "Find class",
        "tags": [
          "Classes"
        ],
        "description": "Find class (either regular or provisional) by ontology and class id.",
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          },
          {
            "$ref": "#/parameters/class_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/classes/{id}/tree": {
      "get": {
        "summary": "Get class tree",
        "tags": [
          "Classes"
        ],
        "description": "Get class tree (only for regular classes).",
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          },
          {
            "$ref": "#/parameters/class_id_regular"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/classes/{id}/children": {
      "get": {
        "summary": "Get class children",
        "tags": [
          "Classes"
        ],
        "description": "Get class children (only for regular classes).",
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          },
          {
            "$ref": "#/parameters/class_id_regular"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/page_size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/classes/{id}/descendants": {
      "get": {
        "summary": "Get class descendants",
        "tags": [
          "Classes"
        ],
        "description": "Get class descendants.",
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          },
          {
            "$ref": "#/parameters/class_id"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/page_size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/classes/{id}/parents": {
      "get": {
        "summary": "Get class parents",
        "tags": [
          "Classes"
        ],
        "description": "Get class parents.",
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          },
          {
            "$ref": "#/parameters/class_id_regular"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/classes/provisional": {
      "get": {
        "summary": "Get provisional classes",
        "tags": [
          "Classes"
        ],
        "description": "Get provisional classes (including provisional value sets and provisional values).",
        "parameters": [
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/page_size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/classes/provisional": {
      "get": {
        "summary": "Get all provisional classes in a particular ontology",
        "tags": [
          "Classes"
        ],
        "description": "Get all provisional classes in a particular ontology (including provisional value sets and provisional values)",
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/page_size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/classes/{id}": {
      "put": {
        "summary": "Update a provisional class",
        "tags": [
          "Classes"
        ],
        "description": "Update a provisional class.",
        "parameters": [
          {
            "$ref": "#/parameters/class_id_provisional"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a provisional class",
        "tags": [
          "Classes"
        ],
        "description": "Update a provisional class.",
        "parameters": [
          {
            "$ref": "#/parameters/class_id_provisional"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies": {
      "get": {
        "summary": "Find all ontologies",
        "description": "Find all ontologies.",
        "tags": [
          "Ontologies"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{id}": {
      "get": {
        "summary": "Find ontology by id",
        "description": "Find ontology by id.",
        "tags": [
          "Ontologies"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ontology_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/classes/roots": {
      "get": {
        "summary": "Get root classes",
        "description": "Get root classes in a particular ontology. For the CEDARPC ontology, all provisional classes in it will be returned.",
        "tags": [
          "Classes",
          "Ontologies"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/properties/roots": {
      "get": {
        "summary": "Get root properties",
        "description": "Get root properties in a particular ontology.",
        "tags": [
          "Properties",
          "Ontologies"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/relations": {
      "post": {
        "summary": "Create a provisional relation",
        "tags": [
          "Relations"
        ],
        "description": "Create a provisional relation.",
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/relations/{id}": {
      "get": {
        "summary": "Find provisional relation by id",
        "description": "Find provisional relation by id.",
        "tags": [
          "Relations"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/relation_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "summary": "Delete provisional relation",
        "description": "Delete provisional relation by id.",
        "tags": [
          "Relations"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/relation_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/vs-collections": {
      "get": {
        "summary": "Find all value set collections",
        "description": "Find all value set collections.",
        "tags": [
          "Value set collections"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/vs-collections/{vs_collection}/value-sets": {
      "post": {
        "summary": "Create a provisional value set",
        "tags": [
          "Value sets"
        ],
        "description": "Create a provisional value set in a particular value set collection.",
        "parameters": [
          {
            "$ref": "#/parameters/vs_collection"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "summary": "Get all value sets in a value set collection",
        "tags": [
          "Value sets"
        ],
        "description": "Get all value sets in a value set collection.",
        "parameters": [
          {
            "$ref": "#/parameters/vs_collection"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/page_size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/vs-collections/{vs_collection}/value-sets/{id}": {
      "get": {
        "summary": "Find value set by id",
        "description": "Find provisional value set by id (either provisional or regular).",
        "tags": [
          "Value sets"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/vs_collection"
          },
          {
            "$ref": "#/parameters/vs_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/vs-collections/{vs_collection}/values/{id}/value-set": {
      "get": {
        "summary": "Find the value set that contains a particular value",
        "description": "Find the value set that contains a particular value.",
        "tags": [
          "Value sets"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/vs_collection"
          },
          {
            "$ref": "#/parameters/vs_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/vs-collections/{vs_collection}/value-sets/{id}/tree": {
      "get": {
        "summary": "Get value set tree",
        "tags": [
          "Value sets"
        ],
        "description": "Get value set tree (only for regular value sets).",
        "parameters": [
          {
            "$ref": "#/parameters/vs_collection"
          },
          {
            "$ref": "#/parameters/vs_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/value-sets": {
      "get": {
        "summary": "Find all value sets",
        "description": "Find all value sets.",
        "tags": [
          "Value sets"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/value-sets/{id}": {
      "put": {
        "summary": "Update a provisional value set",
        "tags": [
          "Value sets"
        ],
        "description": "Update a provisional value set.",
        "parameters": [
          {
            "$ref": "#/parameters/vs_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a provisional value set",
        "tags": [
          "Value sets"
        ],
        "description": "Update a provisional value set.",
        "parameters": [
          {
            "$ref": "#/parameters/vs_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/vs-collections/{vs_collection}/value-sets/{vs}/values": {
      "post": {
        "summary": "Create a provisional value",
        "tags": [
          "Values"
        ],
        "description": "Create a provisional value in a given value set.",
        "parameters": [
          {
            "$ref": "#/parameters/vs_collection"
          },
          {
            "$ref": "#/parameters/vs"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "summary": "Find all values in a value set",
        "tags": [
          "Values"
        ],
        "description": "Find all values in a value set (either regular or provisional).",
        "parameters": [
          {
            "$ref": "#/parameters/vs_collection"
          },
          {
            "$ref": "#/parameters/vs"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/page_size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/vs-collections/{vs_collection}/values/{id}": {
      "get": {
        "summary": "Find value by id",
        "description": "Find value by id.",
        "tags": [
          "Values"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/vs_collection"
          },
          {
            "$ref": "#/parameters/value_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/vs-collections/{vs_collection}/values/{id}/tree": {
      "get": {
        "summary": "Get value tree",
        "tags": [
          "Values"
        ],
        "description": "Get value tree (only for regular values).",
        "parameters": [
          {
            "$ref": "#/parameters/vs_collection"
          },
          {
            "$ref": "#/parameters/value_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/vs-collections/{vs_collection}/values/{id}/all-values": {
      "get": {
        "summary": "Find all values in the value set that the given value belongs to",
        "tags": [
          "Values"
        ],
        "description": "Find all values in the value set that the given value belongs to.",
        "parameters": [
          {
            "$ref": "#/parameters/vs_collection"
          },
          {
            "$ref": "#/parameters/value_id"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/page_size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/values/{id}": {
      "put": {
        "summary": "Update a provisional value",
        "tags": [
          "Values"
        ],
        "description": "Update a provisional value.",
        "parameters": [
          {
            "$ref": "#/parameters/value_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a provisional value",
        "tags": [
          "Values"
        ],
        "description": "Delete a provisional value.",
        "parameters": [
          {
            "$ref": "#/parameters/value_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/properties": {
      "get": {
        "summary": "Get properties",
        "tags": [
          "Properties"
        ],
        "description": "Get all properties from a specific ontology.",
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/properties/{id}": {
      "get": {
        "summary": "Find property",
        "tags": [
          "Properties"
        ],
        "description": "Find property by id.",
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          },
          {
            "$ref": "#/parameters/property_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/properties/{id}/tree": {
      "get": {
        "summary": "Get property tree",
        "tags": [
          "Properties"
        ],
        "description": "Get property tree.",
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          },
          {
            "$ref": "#/parameters/property_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/properties/{id}/children": {
      "get": {
        "summary": "Get property children",
        "tags": [
          "Properties"
        ],
        "description": "Get property children (only for regular classes).",
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          },
          {
            "$ref": "#/parameters/property_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/properties/{id}/descendants": {
      "get": {
        "summary": "Get property descendants",
        "tags": [
          "Properties"
        ],
        "description": "Get property descendants.",
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          },
          {
            "$ref": "#/parameters/property_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ontologies/{ontology}/properties/{id}/parents": {
      "get": {
        "summary": "Get property parents",
        "tags": [
          "Properties"
        ],
        "description": "Get property parents.",
        "parameters": [
          {
            "$ref": "#/parameters/ontology"
          },
          {
            "$ref": "#/parameters/property_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "definitions": {
    "IntegratedSearchRequestBody": {
      "type": "object",
      "required": [
        "parameterObject"
      ],
      "properties": {
        "parameterObject": {
          "type": "object",
          "required": [
            "valueConstraints",
            "inputText"
          ],
          "properties": {
            "valueConstraints": {
              "type": "object",
              "required": [
                "classes",
                "ontologies",
                "branches",
                "valueSets"
              ],
              "properties": {
                "classes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "uri",
                      "prefLabel",
                      "type",
                      "source"
                    ],
                    "properties": {
                      "uri": {
                        "type": "string"
                      },
                      "prefLabel": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "source": {
                        "type": "string"
                      }
                    }
                  }
                },
                "ontologies": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "acronym"
                    ],
                    "properties": {
                      "acronym": {
                        "type": "string"
                      }
                    }
                  }
                },
                "branches": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "uri",
                      "acronym"
                    ],
                    "properties": {
                      "uri": {
                        "type": "string"
                      },
                      "acronym": {
                        "type": "string"
                      }
                    }
                  }
                },
                "valueSets": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "uri",
                      "vsCollection"
                    ],
                    "properties": {
                      "uri": {
                        "type": "string"
                      },
                      "vsCollection": {
                        "type": "string"
                      }
                    }
                  }
                },
                "actions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "action",
                      "termUri",
                      "type",
                      "source"
                    ],
                    "properties": {
                      "action": {
                        "type": "string"
                      },
                      "termUri": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "source": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "inputText": {
              "type": "string"
            }
          }
        },
        "page": {
          "$ref": "#/parameters/page"
        },
        "pageSize": {
          "$ref": "#/parameters/page_size"
        }
      }
    },
    "IntegratedSearchResults": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "page",
          "pageCount",
          "pageSize",
          "totalCount",
          "prevPage",
          "nextPage",
          "collection"
        ],
        "properties": {
          "page": {
            "type": "integer"
          },
          "pageCount": {
            "type": "integer"
          },
          "pageSize": {
            "type": "integer"
          },
          "totalCount": {
            "type": "integer"
          },
          "prevPage": {
            "type": "integer"
          },
          "nextPage": {
            "type": "integer"
          },
          "collection": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "at_id",
                "at_type",
                "type",
                "prefLabel",
                "notation",
                "definition"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "at_id": {
                  "type": "string"
                },
                "at_type": {
                  "type": "string"
                },
                "prefLabel": {
                  "type": "string"
                },
                "notation": {
                  "type": "string"
                },
                "definition": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  }
}
